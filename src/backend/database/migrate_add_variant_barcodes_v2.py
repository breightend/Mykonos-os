#!/usr/bin/env python3
"""
Script de migraci√≥n alternativo para agregar c√≥digos de barras √∫nicos por variante
Usa una estrategia de recrear la tabla para evitar problemas con UNIQUE constraints
"""

import sqlite3
import sys
import os
from datetime import datetime

# Agregar el directorio padre al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.barcode_service import BarcodeService


def migrate_add_variant_barcodes_v2(db_path):
    """
    Migraci√≥n alternativa para agregar c√≥digos de barras √∫nicos por variante
    """
    try:
        # Conectar a la base de datos
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        print("üîÑ Iniciando migraci√≥n alternativa de c√≥digos de barras por variante...")

        # 1. Verificar si la columna ya existe
        cursor.execute("PRAGMA table_info(warehouse_stock_variants)")
        columns = [column[1] for column in cursor.fetchall()]

        if "variant_barcode" in columns:
            print(
                "‚úÖ La columna 'variant_barcode' ya existe. Actualizando c√≥digos existentes..."
            )

            # Solo actualizar registros sin c√≥digo
            cursor.execute("""
                SELECT id, product_id, size_id, color_id, branch_id
                FROM warehouse_stock_variants 
                WHERE variant_barcode IS NULL OR variant_barcode = ''
            """)
            variants = cursor.fetchall()

        else:
            print("üìù Creando nueva estructura de tabla...")

            # 2. Obtener todas las variantes existentes
            cursor.execute("""
                SELECT id, product_id, size_id, color_id, branch_id, quantity, last_updated
                FROM warehouse_stock_variants
            """)
            variants = cursor.fetchall()

            # 3. Crear tabla temporal con la nueva estructura
            cursor.execute("""
                CREATE TABLE warehouse_stock_variants_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    product_id INTEGER NOT NULL,
                    size_id INTEGER,
                    color_id INTEGER,
                    branch_id INTEGER NOT NULL,
                    quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
                    variant_barcode TEXT,
                    last_updated TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (product_id) REFERENCES products (id),
                    FOREIGN KEY (size_id) REFERENCES sizes (id),
                    FOREIGN KEY (color_id) REFERENCES colors (id),
                    FOREIGN KEY (branch_id) REFERENCES storage (id)
                )
            """)

            print("‚úÖ Tabla temporal creada.")

        if not variants:
            print("‚úÖ No hay variantes para procesar.")
            return

        print(f"üìä Procesando {len(variants)} variantes...")

        # 4. Generar c√≥digos de barras y actualizar/insertar datos
        barcode_service = BarcodeService()
        updated_count = 0
        errors = 0
        used_barcodes = set()

        for variant in variants:
            if "variant_barcode" in columns:
                # Modo actualizaci√≥n
                variant_id, product_id, size_id, color_id, branch_id = variant
                quantity = None  # No lo necesitamos en modo actualizaci√≥n
                last_updated = None
            else:
                # Modo migraci√≥n completa
                (
                    variant_id,
                    product_id,
                    size_id,
                    color_id,
                    branch_id,
                    quantity,
                    last_updated,
                ) = variant

            try:
                # Generar c√≥digo √∫nico para esta variante
                variant_barcode = barcode_service.generate_variant_barcode(
                    product_id, size_id, color_id
                )

                # Verificar unicidad y agregar sufijo si es necesario
                original_barcode = variant_barcode
                counter = 1
                while variant_barcode in used_barcodes:
                    variant_barcode = f"{original_barcode}_{counter:03d}"
                    counter += 1

                used_barcodes.add(variant_barcode)

                if "variant_barcode" in columns:
                    # Actualizar registro existente
                    cursor.execute(
                        """
                        UPDATE warehouse_stock_variants 
                        SET variant_barcode = ?
                        WHERE id = ?
                    """,
                        (variant_barcode, variant_id),
                    )
                else:
                    # Insertar en tabla nueva
                    cursor.execute(
                        """
                        INSERT INTO warehouse_stock_variants_new 
                        (id, product_id, size_id, color_id, branch_id, quantity, variant_barcode, last_updated)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        (
                            variant_id,
                            product_id,
                            size_id,
                            color_id,
                            branch_id,
                            quantity,
                            variant_barcode,
                            last_updated,
                        ),
                    )

                updated_count += 1

                if updated_count % 50 == 0:
                    print(f"‚è≥ Procesadas {updated_count} variantes...")

            except Exception as e:
                print(f"‚ùå Error procesando variante ID {variant_id}: {str(e)}")
                errors += 1
                continue

        # 5. Si estamos en modo migraci√≥n completa, reemplazar la tabla
        if "variant_barcode" not in columns:
            print("üîÑ Reemplazando tabla original...")

            # Eliminar tabla original
            cursor.execute("DROP TABLE warehouse_stock_variants")

            # Renombrar tabla nueva
            cursor.execute("""
                ALTER TABLE warehouse_stock_variants_new 
                RENAME TO warehouse_stock_variants
            """)

            # Crear √≠ndice para mejorar rendimiento
            cursor.execute("""
                CREATE INDEX idx_variant_barcode 
                ON warehouse_stock_variants(variant_barcode)
            """)

            print("‚úÖ Tabla reemplazada exitosamente.")

        # 6. Confirmar cambios
        conn.commit()

        print(f"\n‚úÖ Migraci√≥n completada:")
        print(f"   üìà Variantes procesadas: {updated_count}")
        print(f"   ‚ùå Errores: {errors}")
        print(f"   üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # 7. Verificar integridad
        print("\nüîç Verificando integridad de datos...")
        cursor.execute("""
            SELECT COUNT(*) FROM warehouse_stock_variants 
            WHERE variant_barcode IS NULL OR variant_barcode = ''
        """)
        remaining = cursor.fetchone()[0]

        if remaining == 0:
            print("‚úÖ Todas las variantes tienen c√≥digos de barras.")
        else:
            print(f"‚ö†Ô∏è  Quedan {remaining} variantes sin c√≥digo de barras.")

        # 8. Mostrar estad√≠sticas
        cursor.execute("SELECT COUNT(*) FROM warehouse_stock_variants")
        total_variants = cursor.fetchone()[0]

        cursor.execute("""
            SELECT COUNT(DISTINCT variant_barcode) 
            FROM warehouse_stock_variants 
            WHERE variant_barcode IS NOT NULL
        """)
        unique_barcodes = cursor.fetchone()[0]

        print(f"\nüìä Estad√≠sticas finales:")
        print(f"   Total de variantes: {total_variants}")
        print(f"   C√≥digos √∫nicos: {unique_barcodes}")

        conn.close()

    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n: {str(e)}")
        if "conn" in locals():
            conn.rollback()
            conn.close()
        raise


def main():
    """Funci√≥n principal del script de migraci√≥n"""

    # Ruta a la base de datos
    db_path = os.path.join(os.path.dirname(__file__), "mykonos.db")

    if not os.path.exists(db_path):
        print(f"‚ùå No se encontr√≥ la base de datos en: {db_path}")
        print("Por favor, verifica la ruta de la base de datos.")
        return

    print(f"üéØ Base de datos: {db_path}")

    # Hacer backup antes de la migraci√≥n
    backup_path = f"{db_path}.backup_v2_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    try:
        import shutil

        shutil.copy2(db_path, backup_path)
        print(f"üíæ Backup creado: {backup_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  No se pudo crear backup: {str(e)}")
        response = input("¬øContinuar sin backup? (s/N): ")
        if response.lower() != "s":
            print("Migraci√≥n cancelada.")
            return

    # Ejecutar migraci√≥n
    try:
        migrate_add_variant_barcodes_v2(db_path)
        print("\nüéâ ¬°Migraci√≥n completada exitosamente!")

    except Exception as e:
        print(f"\nüí• Migraci√≥n fall√≥: {str(e)}")
        if os.path.exists(backup_path):
            print(f'üîÑ Para restaurar el backup: copy "{backup_path}" "{db_path}"')


if __name__ == "__main__":
    main()
